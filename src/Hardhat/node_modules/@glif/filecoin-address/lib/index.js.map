{"version":3,"sources":["../src/index.ts"],"names":["leb","blake2b","uint8arrays","utils","base32","base32Function","DelegatedNamespace","Protocol","CoinType","getLeb128Length","input","entries","index","byte","Error","defaultCoinType","MAIN","coinTypes","Object","values","protocols","filter","p","payloadHashLength","blsPublicKeyBytes","maxSubaddressLen","maxInt64StringLength","checksumHashLength","ethAddressLength","addressHash","ingest","Address","bytes","coinType","length","_coinType","protocol","slice","encode","addr","equals","DELEGATED","payload","namespaceBytes","namespaceLength","Number","unsigned","decode","toString","subAddr","bigintToArray","v","tmp","BigInt","fromString","getChecksum","validateChecksum","data","checksum","newAddress","protocolByte","concat","newIDAddress","id","ID","newActorAddress","ACTOR","newSecp256k1Address","pubkey","SECP256K1","newBLSAddress","BLS","newDelegatedAddress","namespace","namespaceByte","newDelegatedEthAddress","ethAddr","isAddress","EVM","arrayify","address","checkAddressString","prefix","subAddrBytes","checksumBytes","newFromString","validateAddressString","addressString","error","includes","join","raw","isNaN","splitIndex","indexOf","namespaceStr","subAddrCksmStr","subAddrCksmBytes","namespaceNumber","payloadCksm","idFromAddress","parseInt","delegatedFromEthAddress","TEST","ethAddressFromDelegated","delegated","getAddress","subAddrHex","ethAddressFromID","idAddress","buffer","ArrayBuffer","dataview","DataView","setUint8","setBigUint64","Uint8Array"],"mappings":"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","sourcesContent":["import * as leb from 'leb128'\nimport { blake2b } from 'blakejs'\nimport * as uint8arrays from 'uint8arrays'\nimport { utils } from 'ethers'\nimport { base32 as base32Function } from './base32'\nimport { DelegatedNamespace, Protocol } from './enums'\nimport { CoinType } from './coinType'\n\nexport * from './coinType'\nexport * from './enums'\n\nexport interface AddressData {\n  protocol: Protocol\n  payload: Uint8Array\n  bytes: Uint8Array\n  coinType: CoinType\n  namespace?: number\n}\n\nfunction getLeb128Length(input: Uint8Array): number {\n  for (const [index, byte] of input.entries()) if (byte < 128) return index + 1\n  throw new Error('Failed to get Leb128 length')\n}\n\nconst defaultCoinType = CoinType.MAIN\nconst base32 = base32Function('abcdefghijklmnopqrstuvwxyz234567')\n\n// Store valid CoinTypes / Protocols for runtime validation\nconst coinTypes = Object.values(CoinType)\nconst protocols = Object.values(Protocol).filter(p => typeof p === 'number')\n\n// Defines the hash length taken over addresses\n// using the Actor and SECP256K1 protocols.\nconst payloadHashLength = 20\n\n// The length of a BLS public key\nconst blsPublicKeyBytes = 48\n\n// The maximum length of a delegated address's sub-address.\nconst maxSubaddressLen = 54\n\n// The maximum length of `int64` as a string.\nconst maxInt64StringLength = 19\n\n// The hash length used for calculating address checksums.\nconst checksumHashLength = 4\n\n// The length of an Ethereum address in bytes\nconst ethAddressLength = 20\n\nfunction addressHash(ingest: Uint8Array): Uint8Array {\n  return blake2b(ingest, null, payloadHashLength)\n}\n\nexport class Address {\n  readonly bytes: Uint8Array\n  readonly _coinType: CoinType\n\n  constructor(bytes: Uint8Array, coinType: CoinType = defaultCoinType) {\n    if (!bytes || !bytes.length) throw new Error('Missing bytes in address')\n\n    this.bytes = bytes\n    this._coinType = coinType\n\n    if (!(this.protocol() in Protocol)) {\n      throw new Error(`Invalid protocol ${this.protocol()}`)\n    }\n  }\n\n  network(): CoinType {\n    return this._coinType\n  }\n\n  coinType(): CoinType {\n    return this._coinType\n  }\n\n  protocol(): Protocol {\n    return this.bytes[0]\n  }\n\n  payload(): Uint8Array {\n    return this.bytes.slice(1)\n  }\n\n  get namespaceLength(): number {\n    if (this.protocol() !== Protocol.DELEGATED)\n      throw new Error('Can only get namespace length for delegated addresses')\n    return getLeb128Length(this.payload())\n  }\n\n  get namespace(): number {\n    if (this.protocol() !== Protocol.DELEGATED)\n      throw new Error('Can only get namespace for delegated addresses')\n    const namespaceBytes = this.payload().slice(0, this.namespaceLength)\n    return Number(leb.unsigned.decode(namespaceBytes))\n  }\n\n  get subAddr(): Uint8Array {\n    if (this.protocol() !== Protocol.DELEGATED)\n      throw new Error('Can only get subaddress for delegated addresses')\n    return this.bytes.slice(this.namespaceLength + 1)\n  }\n\n  get subAddrHex(): string {\n    return uint8arrays.toString(this.subAddr, 'hex')\n  }\n\n  /**\n   * toString returns a string representation of this address. If no \"coinType\"\n   * parameter was passed to the constructor the address will be prefixed with\n   * the default coinType prefix \"f\" (mainnet).\n   */\n  toString(): string {\n    return encode(this._coinType, this)\n  }\n\n  /**\n   * equals determines if this address is the \"same\" address as the passed\n   * address. Two addresses are considered equal if they are the same instance\n   * OR if their \"bytes\" property matches byte for byte.\n   */\n  equals(addr: Address): boolean {\n    if (this === addr) {\n      return true\n    }\n    return uint8arrays.equals(this.bytes, addr.bytes)\n  }\n}\n\nexport function bigintToArray(v: string | bigint | number): Uint8Array {\n  let tmp = BigInt(v).toString(16)\n  if (tmp.length % 2 === 1) tmp = `0${tmp}`\n  return uint8arrays.fromString(tmp, 'base16')\n}\n\nexport function getChecksum(ingest: string | Uint8Array): Uint8Array {\n  return blake2b(ingest, null, checksumHashLength)\n}\n\nexport function validateChecksum(\n  data: string | Uint8Array,\n  checksum: Uint8Array\n): boolean {\n  return uint8arrays.equals(getChecksum(data), checksum)\n}\n\nexport function newAddress(\n  protocol: Protocol,\n  payload: Uint8Array,\n  coinType?: CoinType\n): Address {\n  const protocolByte = leb.unsigned.encode(protocol)\n  return new Address(uint8arrays.concat([protocolByte, payload]), coinType)\n}\n\nexport function newIDAddress(\n  id: number | string,\n  coinType?: CoinType\n): Address {\n  return newAddress(Protocol.ID, leb.unsigned.encode(id), coinType)\n}\n\n/**\n * newActorAddress returns an address using the Actor protocol.\n */\nexport function newActorAddress(\n  data: Uint8Array,\n  coinType?: CoinType\n): Address {\n  return newAddress(Protocol.ACTOR, addressHash(data), coinType)\n}\n\n/**\n * newSecp256k1Address returns an address using the SECP256K1 protocol.\n */\nexport function newSecp256k1Address(\n  pubkey: Uint8Array,\n  coinType?: CoinType\n): Address {\n  return newAddress(Protocol.SECP256K1, addressHash(pubkey), coinType)\n}\n\n/**\n * newBLSAddress returns an address using the BLS protocol.\n */\nexport function newBLSAddress(\n  pubkey: Uint8Array,\n  coinType?: CoinType\n): Address {\n  return newAddress(Protocol.BLS, pubkey, coinType)\n}\n\n/**\n * newDelegatedAddress returns an address using the Delegated protocol.\n */\nexport function newDelegatedAddress(\n  namespace: number,\n  subAddr: Uint8Array,\n  coinType?: CoinType\n): Address {\n  if (subAddr.length > maxSubaddressLen)\n    throw new Error('Subaddress address length')\n\n  const namespaceByte = leb.unsigned.encode(namespace)\n  return newAddress(\n    Protocol.DELEGATED,\n    uint8arrays.concat([namespaceByte, subAddr]),\n    coinType\n  )\n}\n\n/**\n * newDelegatedEthAddress returns an address for eth using the Delegated protocol.\n */\nexport function newDelegatedEthAddress(\n  ethAddr: string,\n  coinType?: CoinType\n): Address {\n  if (!utils.isAddress(ethAddr)) throw new Error('Invalid Ethereum address')\n\n  return newDelegatedAddress(\n    DelegatedNamespace.EVM,\n    utils.arrayify(ethAddr),\n    coinType\n  )\n}\n\nexport function decode(address: string): Address {\n  const { protocol, payload, coinType } = checkAddressString(address)\n  return newAddress(protocol, payload, coinType)\n}\n\nexport function encode(coinType: string, address: Address): string {\n  if (!address || !address.bytes) throw Error('Invalid address')\n\n  const protocol = address.protocol()\n  const payload = address.payload()\n  const prefix = `${coinType}${protocol}`\n\n  switch (protocol) {\n    case Protocol.ID: {\n      return `${prefix}${leb.unsigned.decode(payload)}`\n    }\n    case Protocol.DELEGATED: {\n      const namespace = address.namespace\n      const subAddrBytes = address.subAddr\n      const protocolByte = leb.unsigned.encode(protocol)\n      const namespaceByte = leb.unsigned.encode(namespace)\n      const checksumBytes = getChecksum(\n        uint8arrays.concat([protocolByte, namespaceByte, subAddrBytes])\n      )\n\n      const bytes = uint8arrays.concat([subAddrBytes, checksumBytes])\n      return `${prefix}${namespace}f${base32.encode(bytes)}`\n    }\n    default: {\n      const checksum = getChecksum(address.bytes)\n      const bytes = uint8arrays.concat([payload, checksum])\n      return `${prefix}${base32.encode(bytes)}`\n    }\n  }\n}\n\nexport function newFromString(address: string): Address {\n  return decode(address)\n}\n\nexport function validateAddressString(addressString: string): boolean {\n  try {\n    checkAddressString(addressString)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\nexport function checkAddressString(address: string): AddressData {\n  if (typeof address !== 'string' || address.length < 3)\n    throw Error('Address should be a string of at least 3 characters')\n\n  const coinType = address[0] as CoinType\n  if (!coinTypes.includes(coinType))\n    throw Error(`Address cointype should be one of: ${coinTypes.join(', ')}`)\n\n  const protocol = Number(address[1]) as Protocol\n  if (!protocols.includes(protocol))\n    throw Error(`Address protocol should be one of: ${protocols.join(', ')}`)\n\n  const protocolByte = leb.unsigned.encode(protocol)\n  const raw = address.slice(2)\n\n  switch (protocol) {\n    case Protocol.ID: {\n      if (raw.length > maxInt64StringLength)\n        throw Error('Invalid ID address length')\n      if (isNaN(Number(raw))) throw Error('Invalid ID address')\n      const payload = leb.unsigned.encode(raw)\n      const bytes = uint8arrays.concat([protocolByte, payload])\n      return { protocol, payload, bytes, coinType }\n    }\n\n    case Protocol.DELEGATED: {\n      const splitIndex = raw.indexOf('f')\n      if (splitIndex === -1) throw new Error('Invalid delegated address')\n\n      const namespaceStr = raw.slice(0, splitIndex)\n      if (namespaceStr.length > maxInt64StringLength)\n        throw new Error('Invalid delegated address namespace')\n\n      const subAddrCksmStr = raw.slice(splitIndex + 1)\n      const subAddrCksmBytes = base32.decode(subAddrCksmStr)\n      if (subAddrCksmBytes.length < checksumHashLength)\n        throw Error('Invalid delegated address length')\n\n      const subAddrBytes = subAddrCksmBytes.slice(0, -checksumHashLength)\n      const checksumBytes = subAddrCksmBytes.slice(subAddrBytes.length)\n      if (subAddrBytes.length > maxSubaddressLen)\n        throw Error('Invalid delegated address length')\n\n      const namespaceNumber = Number(namespaceStr)\n      const namespaceByte = leb.unsigned.encode(namespaceNumber)\n      const payload = uint8arrays.concat([namespaceByte, subAddrBytes])\n      const bytes = uint8arrays.concat([protocolByte, payload])\n\n      if (!validateChecksum(bytes, checksumBytes))\n        throw Error('Invalid delegated address checksum')\n\n      return { protocol, payload, bytes, coinType, namespace: namespaceNumber }\n    }\n\n    case Protocol.SECP256K1:\n    case Protocol.ACTOR:\n    case Protocol.BLS: {\n      const payloadCksm = base32.decode(raw)\n      if (payloadCksm.length < checksumHashLength)\n        throw Error('Invalid address length')\n\n      const payload = payloadCksm.slice(0, -checksumHashLength)\n      const checksum = payloadCksm.slice(payload.length)\n\n      if (protocol === Protocol.SECP256K1 || protocol === Protocol.ACTOR)\n        if (payload.length !== payloadHashLength)\n          throw Error('Invalid address length')\n\n      if (protocol === Protocol.BLS)\n        if (payload.length !== blsPublicKeyBytes)\n          throw Error('Invalid address length')\n\n      const bytes = uint8arrays.concat([protocolByte, payload])\n      if (!validateChecksum(bytes, checksum))\n        throw Error('Invalid address checksum')\n\n      return { protocol, payload, bytes, coinType }\n    }\n\n    default:\n      throw Error(`Invalid address protocall: ${protocol}`)\n  }\n}\n\n/**\n * idFromAddress extracts the ID from an ID address.\n */\nexport function idFromAddress(address: Address): number {\n  if (address.protocol() !== Protocol.ID)\n    throw new Error('Cannot get ID from non ID address')\n  // An unsigned varint should be less than 2^63 which is < Number.MAX_VALUE.\n  // So this number SHOULD be representable in JS and safe to parseInt.\n  // https://github.com/multiformats/unsigned-varint\n  // TODO: does leb128 enforce the max value?\n  return parseInt(leb.unsigned.decode(address.payload()), 10)\n}\n\n/**\n * delegatedFromEthAddress derives the f410 address from an ethereum hex address\n */\n\nexport function delegatedFromEthAddress(\n  ethAddr: string,\n  coinType: CoinType = CoinType.TEST\n): string {\n  return newDelegatedEthAddress(ethAddr, coinType).toString()\n}\n\n/**\n * ethAddressFromDelegated derives the ethereum address from an f410 address\n */\n\nexport function ethAddressFromDelegated(delegated: string): string {\n  return utils.getAddress(`0x${decode(delegated).subAddrHex}`)\n}\n\n/**\n * ethAddressFromID derives the ethereum address from an f0 address\n */\n\nexport function ethAddressFromID(idAddress: string): string {\n  const address = decode(idAddress)\n  const id = idFromAddress(address)\n  const buffer = new ArrayBuffer(ethAddressLength)\n  const dataview = new DataView(buffer)\n  dataview.setUint8(0, 255)\n  dataview.setBigUint64(12, BigInt(id), false)\n  return `0x${uint8arrays.toString(new Uint8Array(buffer), 'hex')}`\n}\n\nexport default {\n  Address,\n  newAddress,\n  newIDAddress,\n  newActorAddress,\n  newSecp256k1Address,\n  newBLSAddress,\n  newFromString,\n  bigintToArray,\n  decode,\n  encode,\n  getChecksum,\n  validateChecksum,\n  validateAddressString,\n  checkAddressString,\n  idFromAddress,\n  delegatedFromEthAddress,\n  ethAddressFromDelegated,\n  CoinType,\n  Protocol\n}\n"],"file":"index.js"}