import { HardhatNetworkProvider } from "hardhat/internal/hardhat-network/provider/provider";
import { EthereumProvider } from "hardhat/types";
/**
 * Finds the "base" Ethereum provider of the current hardhat environment.
 *
 * Basically, hardhat uses a system of nested providers where each provider wraps the next and
 * "provides" some extra features. When you're running on top of the "hardhat evm" the bottom of
 * this series of providers is the "HardhatNetworkProvider":
 * https://github.com/nomiclabs/hardhat/blob/master/packages/hardhat-core/src/internal/hardhat-network/provider/provider.ts
 * This object has direct access to the node (provider._node), which in turn has direct access to
 * the ethereumjs-vm instance (provider._node._vm). So it's quite useful to be able to find this
 * object reliably!
 *
 * @param hre hardhat runtime environment to pull the base provider from.
 * @return base hardhat network provider
 */
export declare const getHardhatNetworkProvider: (ethereumProvider: EthereumProvider) => Promise<HardhatNetworkProvider>;
//# sourceMappingURL=hardhat-network-provider.d.ts.map